<?php
/**
 * Created by PhpStorm.
 * User: eche
 * Date: 7/2/18
 * Time: 11:10 AM
 */

namespace API\Model;

require_once __DIR__ . "/../../bootstrap.php";


class Image
{

    /*
     * Holds all the text being used
     */
    public $text;

    /*
    * In order to get the right size of box, especially in 
    *occasions that a word wrap is needed, the text has to be 
    *wrapped before using it to make the box.
    */
    private $wrappedHeader;

    private $wrappedBody;

    private $wrappedFooter;

    /*
    * When text is written on a canvas, there will be need
    * generate name for the image file, in order to save it.
    * That will be stored in this property.
    */
    public $randomName;

    /*
    * Holds the image resource being written on. That is the 
    * resource returned by imagecreatetruecolor().
    * Note: this is not the image uploaded by the user, rather
    * an image resource generated by the application. This is 
    * is especially important for writting on a colour canvas.
    */
    public $imageCanvas;

    /*
    * When a user supplies the path to image file to be written
    * it is stored here. 
    */
    private $imagePath;

    private $image;

    /*
    *   Properties to hold the paths to the various font files.
    */
    private $aria;

    private $pacifico;

    private $franchise;

    private $prisma;

    /*
     * Dimensions. If the image resource sent is more 600x600,
     * it will be resized to 600x600.
     */
    private $width = 600;

    private $height = 600;

    /*
     * Image file and resource.
     */
    public $imageSource; // Image file being written on

    private $receivedImages = 'file_storage/images/'; // Location to store the images uploaded by the client


    /*
    * Each text to be written is put inside a bounding box, just slightly bigger
    * than the text itself. The three various texts supplied are
    * stored in these class properties.
    */
    private $headerBox;

    private $bodyBox;

    private $footerBox;

    /*
    * For each text supplied by the user a position has to be
    * assigned. The various positions are stored in these properties.
    */
    private $titlePosition;

    private $bodyPosition;

    private $footerPosition;

    /*
    * An array to hold all the values of colours that can be
    * specified by the user.
    */
    private $colours;

    /*
    * For each text entered by the user a specific can be specified,
    * the value is stored in these properties.
    */
    private $headerColour;

    private $bodyColour;

    private $footerColour;

   /*
   * The font type chosen by the user is specified here. 
   */
    private $headerFontType;

    private $bodyFontType;

    private $footerFontType;

    /*
    * The angle that the font will be tilted.
    */
    private $headerAngle;

    private $bodyAngle;

    private $footerAngle;

    /*
    * The font sizes can be specified by the users
    */
    private $headerFontSize;

    private $bodyFontSize;

    private $footerFontSize;
    
    

    function __construct($text=array())
    {
        /* 
        * Pass all the values ($text) passed as argument to the
        * constructor to the field property $this->text
        */
        $this->text = $text;
        /* 
        * Assign the values to the corresponding class
        * properties that are required to be separate from the beginning.
        */       
        if (isset($this->text['header_position'])) $this->headerPosition = htmlspecialchars($this->text['header_position']);
        if (isset($this->text['body_position'])) $this->bodyPosition = htmlspecialchars($this->text['body_position']);
        if (isset($this->text['footer_position'])) $this->footerPosition = htmlspecialchars($this->text['footer_position']);
        if (isset($this->text['hd_font_type'])) $this->headerFontType = htmlspecialchars($this->text['hd_font_type']);
        if (isset($this->text['bd_font_type'])) $this->bodyFontType = htmlspecialchars($this->text['bd_font_type']);
        if (isset($this->text['ft_font_type'])) $this->footerFontType = htmlspecialchars($this->text['ft_font_type']);
        if (isset($this->text['hd_font_size'])) {
            $this->headerFontSize = \htmlspecialchars($this->text['hd_font_size']);
        } else {
            $this->headerFontSize = 20;
        }
        if (isset($this->text['bd_font_size'])) {
            $this->bodyFontSize = \htmlspecialchars($this->text['bd_font_size']);
        } else {
            $this->bodyFontSize = 20;
        }
        if (isset($this->text['ft_font_size'])) {
            $this->footerFontSize = htmlspecialchars($this->text['ft_font_size']);
        } else {
            $this->footerFontSize = 20;
        }
        if (isset($this->text['hd_font_angle'])) {
            $this->headerAngle = htmlspecialchars($this->text['hd_font_angle']);
        } else {
            $this->headerAngle = 0;
        }
        if (isset($this->text['bd_font_angle'])) {
            $this->bodyAngle = htmlspecialchars($this->text['bd_font_angle']);
        } else {
            $this->bodyAngle = 0;
        }
        if (isset($this->text['ft_font_angle'])) {
            $this->footerAngle = htmlspecialchars($this->text['ft_font_angle']);
        } else {
            $this->footerAngle = 0;
        }

        $this->fonts();

        $this->imageCanvas = \imagecreatetruecolor($this->width, $this->height);
    }      

    /*
     * The fonts require the font file to be loaded before they can be used. This function takes care of assigning the file path
     * This might seem to be more appropriate for the constructor, it's a matter of choice, so choose to put mine here. ;)
     */
    private function fonts()
    {
        $this->aria = app_base_dir() . '/public/resources/fonts/aria/aria.ttf';
        $this->franchise = app_base_dir() . '/public/resources/fonts/franchise/Franchise-Bold-hinted.ttf';
        $this->pacifico = app_base_dir() . '/public/resources/fonts/pacifico/Pacifico.ttf';
        $this->prisma = app_base_dir() . '/public/resources/fonts/prisma/Prisma.ttf';
    }

    /*
     *  Assign colours
     */
    private function colours()
    {
        $this->colours['black'] = imagecolorallocate($this->imageCanvas, 0, 0, 0);
        $this->colours['white'] = imagecolorallocate($this->imageCanvas, 255, 255, 255);
        $this->colours['red'] = imagecolorallocate($this->imageCanvas, 255, 0, 0);
        $this->colours['yellow'] = imagecolorallocate($this->imageCanvas, 255, 255, 0);
        $this->colours['green'] = imagecolorallocate($this->imageCanvas, 0, 100, 0);
    }

    /*
     * The box to hold each text.
     * The box is drawn using the specified font size and style.
     */
    function box()
    {

        // Do a wordwrap before making the box.
        $this->wrappedHeader = wordwrap($this->text['title'], 30, "\n");
        $this->wrappedBody = wordwrap($this->text['body'], 35, "\n");
        $this->wrappedFooter = wordwrap($this->text['footer'], 20, "\n");
        
        // Assigns the bounding box to be used for the various texts to the class properties
        $this->headerBox = imagettfbbox($this->headerFontSize, 0, $this->headerFontType, $this->wrappedHeader);
        $this->bodyBox = imagettfbbox($this->bodyFontSize, 0, $this->bodyFontType, $this->wrappedBody);
        $this->footerBox = imagettfbbox($this->footerFontSize, 0, $this->footerFontType, $this->wrappedFooter);


        $this->headerBox = imagettfbbox($this->fontSize, $this->writeAngle, $this->headerFontType, $this->wrappedText['title']);
        $this->bodyBox = imagettfbbox($this->fontSize, $this->writeAngle, $this->bodyFontType, $this->wrappedText['body']);
        $this->footerBox = imagettfbbox($this->fontSize, $this->writeAngle, $this->footerFontType, $this->wrappedText['footer']);        
    }

    /*
    *   Get the path of the image being written on 
    */
    function getImagePath()
    {
        if(isset($this->text['image'])) $this->imagePath = $this->text['image'];    
        return $this->imagePath;
    }

    /*
     * Get the image file and check the dimensions.
     * Assign the values to class properties.
     */
    function resizeImage()
    {
        // Get the dimension of the original image as an array
        list($fileWidth, $fileHeight) = getimagesize($this->getImagePath());

        // Check the ratio of the new image and reassign new width and height if necessary
        $ratio = $fileWidth / $fileHeight;

        if ($this->width / $this->height > $ratio) {
            $this->width = $this->height * $ratio;
        } else {
            $this->height = $this->width / $ratio;
        }

        // Resample
        $source = imagecreatefrompng($this->imagePath);
        $this->image = imagecreatetruecolor($this->width, $this->height);

        imagecopyresampled($this->image, $source, 0, 0, 0, 0, $this->width, $this->height, $fileWidth, $fileHeight);

        return $this->image;
    }  

    /*
    * The boxes made in box() and assigned to the corresponding field property is used here to 
    * calculate various positions for the text. There are nine possible positions in all
    * Ranging from topLeft() to bottomRight().
    */
    function topLeft()
    {
        // Retrieves the width and height which is used to set the X and Y coordinates.
         $x = $this->headerBox[0] ;
         $y = $this->headerBox[1] + 25;

        $this->headerPosition = array($x, $y);
    }

    function topMiddle()
    {
        // Retrieves the width and height which is used to set the X and Y coordinates.
        $x = (imagesx($this->image)/2) - ($this->headerBox[2]/2);
        $y = $this->headerBox[1] + 25;

        $this->headerPosition = array($x, $y);
    }

    function topRight()
    {
        // Retrieves the width and height which is used to set the X and Y coordinates.
        $x = imagesx($this->image) - $this->headerBox[2] - 25;
        $y = $this->headerBox[1] + 25;

        $this->headerPosition = array($x, $y);
    }

    function middleLeft()
    {
        // Retrieves the width and height which is used to set the X and Y coordinates.
        $x = $this->bodyBox[0] ;
        $y = (imagesy($this->image)/2) - (imagesy($this->image)/8);

        $this->bodyPosition = array($x, $y);
    }

    function centre()
    {
        // Retrieves the width and height which is used to set the X and Y coordinates.
        $x = (imagesx($this->image)/2) - ($this->bodyBox[2]/2);
        $y = (imagesy($this->image)/2) - (imagesy($this->image)/8);
     
        $this->bodyPosition = array($x, $y);
    }

    function middleRight()
    {
        // Retrieves the width and height which is used to set the X and Y coordinates.
        $x = imagesx($this->image) - $this->bodyBox[2] - 25;
        $y = (imagesy($this->image)/2) - (imagesy($this->image)/8);

        $this->bodyPosition = array($x, $y);
    }

    function bottomLeft()
    {
        // Retrieves the width and height which is used to set the X and Y coordinates.
        $x = $this->footerBox[0] ;
        $y = (imagesy($this->image)/2) + (imagesy($this->image)/8);

        $this->signPosition = array($x, $y);
    }

    function bottomCentre()
    {
       // Retrieves the width and height which is used to set the X and Y coordinates.
        $x = (imagesx($this->image)/2) - ($this->footerBox[2]/2);
        $y = (imagesy($this->image)/2) + (imagesy($this->image)/8);

        $this->signPosition = array($x, $y);
    }

    function bottomRight()
    {
         // Retrieves the width and height which is used to set the X and Y coordinates.
        $x = imagesx($this->image) - $this->footerBox[2] - 5;
        $y = (imagesy($this->image)/2) + (imagesy($this->image)/8);

        $this->signPosition = array($x, $y);
    }     

    /*
     * Generate random names for the image
     */
    function getRandomWord()
    {
        $randomwWord = substr(str_shuffle('abcdefghijklmnopqrstuvwxyz'), 0, 4);        
        $this->randomName = $randomwWord;
    }  

     /*
     *  Handles the logic to choose a particular colour.
     */
    public function whichColour()
    {
        // Check the colour for the header
        switch ($this->headerColour) {
            case 'red':
                $this->headerColour = $this->colours['red'];
                break;
            case 'white':
                $this->headerColour = $this->colours['white'];      
                break;
            case 'black':
                $this->headerColour= $this->colours['black'];
        }            
        switch ($this->bodyColour) {
            case 'red':
                $this->bodyColour = $this->colours['red'];
                break;
            case 'white':
                $this->bodyColour = $this->colours['white'];
                break;
            case 'black':
                $this->bodyColour = $this->colours['black'];
                break;
        }
        switch ($this->footerColour) {
            case 'red':
                $this->footerColour = $this->colours['red'];
                break;            
            case 'white':
                $this->footerColour = $this->colours['white'];
                break;
            case 'black':
                $this->footerColour = $this->colours['black'];
                break;
        }
   }    

   function assignFontType()
   {
       if ($this->headerFontType == "aria") $this->headerFontType = $this->aria;
       elseif ($this->headerFontType == "franchise") $this->headerFontType = $this->franchise;
       elseif ($this->headerFontType == "pacifico") $this->headerFontType = $this->pacifico;
       else $this->headerFontType = $this->prisma;

       if ($this->bodyFontType == "aria") $this->bodyFontType = $this->aria;
       elseif ($this->bodyFontType == "franchise") $this->bodyFontType = $this->franchise;
       elseif ($this->bodyFontType == "pacifico") $this->bodyFontType = $this->pacifico;
       else $this->bodyFontType = $this->prisma;

       if ($this->footerFontType == "aria") $this->footerFontType = $this->aria;
       elseif ($this->footerFontType == "franchise") $this->footerFontType = $this->franchise;
       elseif ($this->footerFontType == "pacifico") $this->footerFontType = $this->pacifico;
       else $this->footerFontType = $this->prisma;
   }   

    /*
     * Check the positions chosen by the user for the various texts
     */
    function assignPosition()
    {
        if (isset($this->titlePosition)) {
            if ($this->titlePosition == "left") $this->topLeft();
            elseif ($this->titlePosition == "centre") $this->topMiddle();
            elseif ($this->titlePosition == "right") $this->topRight();
            else {
                echo "Assign a position for the header";
            }
        }
        if (isset($this->bodyPosition)) {
            if ($this->bodyPosition == "left") $this->middleLeft();
            elseif ($this->bodyPosition == "centre") $this->centre();
            elseif ($this->bodyPosition == "right") $this->middleRight();
            else {
                echo "Assign a position for the body";
            }
        }
        if (isset($this->signPosition)) {
            if ($this->signPosition == "left") $this->bottomLeft();
            elseif ($this->signPosition == "centre") $this->bottomCentre();
            elseif ($this->signPosition == "right") $this->bottomRight();
            else {
                echo "Assign a position for the signature";
            }
        } else {
            echo "Please choose a position to display your text";
        }
    }

    // Write on a canvas
    function writeTextOnColourCanvas()
    {
       // $image = imagecreatetruecolor(500, 500);
        $backgroundColor = imagecolorallocate($this->imageCanvas, 0, 18, 64);
        imagefill($this->imageCanvas, 0, 0, $backgroundColor);

        // Initialises the function to assign colours.
        $this->colours();

        // Determine the colour the user chose
        $this->whichColour();

        // Determine the positions the user chose and assign values.
        $this->assignPosition();

        /*
        * Make $x and $y references to the coordinates of each text position
        */
        // Set header text position and write
        list($x, $y) = $this->headerPosition;
        imagettftext($this->imageCanvas, $this->headerFontSize, $this->headerAngle, $x, $y, $this->headerColour, $this->headerFontType, $this->wrappedHeader);

        // Set body text position and write
        list($x, $y) = $this->bodyPosition;
        imagettftext($this->imageCanvas, $this->bodyFontSize, $this->bodyAngle, $x, $y, $this->bodyColour, $this->bodyFontType, $this->wrappedBody);

        // Set footer text position and write
        list($x, $y) = $this->signPosition;
        imagettftext($this->imageCanvas, $this->footerFontSize, $this->footerAngle, $x, $y, $this->footerColour, $this->footerFontType, $this->wrappedFooter);
        
        // Generate a random word for saving the image.
        $this->getRandomWord();

        // // Save the file and return to the user.
        $storagePath = app_base_dir().'/file_storage/cards'.$this->randomName.'.jpg';
        return imagejpeg($this->imageCanvas, $storagePath);
        // return $this->storagePath;
    }
    
}